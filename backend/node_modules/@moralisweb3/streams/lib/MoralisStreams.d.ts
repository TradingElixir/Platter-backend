import { Endpoints } from '@moralisweb3/api-utils';
import { ApiModule, MoralisCore } from '@moralisweb3/core';
import { CreateStreamOptions } from './methods/create';
import { UpdateStreamOptions } from './methods/update';
import { DeleteStreamOptions } from './methods/delete';
import { GetStreamsOptions } from './methods/getAll';
export declare const BASE_URL = "https://streams-api.aws-prod-streams-master-1.moralis.io";
export declare class MoralisStreams extends ApiModule {
    static readonly moduleName = "streams";
    static create(core?: MoralisCore): MoralisStreams;
    private constructor();
    setup(): void;
    start(): void;
    readonly endpoints: Endpoints;
    readonly add: (options: CreateStreamOptions) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
        webhookUrl: string;
        description: string;
        tag: string;
        tokenAddress?: string | null | undefined;
        topic0?: string | null | undefined;
        includeNativeTxs?: boolean | undefined;
        abi?: {
            [key: string]: unknown;
        } | null | undefined;
        filter?: {
            [key: string]: unknown;
        } | null | undefined;
        address?: string | null | undefined;
        chainIds: string[];
        type: "wallet" | "contract";
        id?: string | undefined;
    }, {
        address: import("@moralisweb3/evm-utils").EvmAddress | undefined;
        tokenAddress: import("@moralisweb3/evm-utils").EvmAddress | undefined;
        chains: import("@moralisweb3/evm-utils").EvmChain[];
        webhookUrl: string;
        description: string;
        tag: string;
        topic0?: string | null | undefined;
        includeNativeTxs?: boolean | undefined;
        abi?: {
            [key: string]: unknown;
        } | null | undefined;
        filter?: {
            [key: string]: unknown;
        } | null | undefined;
        chainIds: string[];
        type: import("@moralisweb3/core").Camelize<"wallet" | "contract">;
        id?: string | undefined;
    }, {
        address: string | undefined;
        tokenAddress: string | undefined;
        chainIds: (string | number)[];
        chains: import("@moralisweb3/evm-utils").EvmChain[];
        webhookUrl: string;
        description: string;
        tag: string;
        topic0?: string | null | undefined;
        includeNativeTxs?: boolean | undefined;
        abi?: {
            [key: string]: unknown;
        } | null | undefined;
        filter?: {
            [key: string]: unknown;
        } | null | undefined;
        type: import("@moralisweb3/core").Camelize<"wallet" | "contract">;
        id?: string | undefined;
    }, import("./resolvers/createStreamEvm").Params>>;
    readonly update: (options: UpdateStreamOptions) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
        webhookUrl: string;
        description: string;
        tag: string;
        tokenAddress?: string | null | undefined;
        topic0?: string | null | undefined;
        includeNativeTxs?: boolean | undefined;
        abi?: {
            [key: string]: unknown;
        } | null | undefined;
        filter?: {
            [key: string]: unknown;
        } | null | undefined;
        address?: string | null | undefined;
        chainIds: string[];
        type: "wallet" | "contract";
        id?: string | undefined;
    }, {
        address: import("@moralisweb3/evm-utils").EvmAddress | undefined;
        tokenAddress: import("@moralisweb3/evm-utils").EvmAddress | undefined;
        chains: import("@moralisweb3/evm-utils").EvmChain[];
        webhookUrl: string;
        description: string;
        tag: string;
        topic0?: string | null | undefined;
        includeNativeTxs?: boolean | undefined;
        abi?: {
            [key: string]: unknown;
        } | null | undefined;
        filter?: {
            [key: string]: unknown;
        } | null | undefined;
        chainIds: string[];
        type: import("@moralisweb3/core").Camelize<"wallet" | "contract">;
        id?: string | undefined;
    }, {
        address: string | undefined;
        tokenAddress: string | undefined;
        chainIds: (string | number)[];
        chains: import("@moralisweb3/evm-utils").EvmChain[];
        webhookUrl: string;
        description: string;
        tag: string;
        topic0?: string | null | undefined;
        includeNativeTxs?: boolean | undefined;
        abi?: {
            [key: string]: unknown;
        } | null | undefined;
        filter?: {
            [key: string]: unknown;
        } | null | undefined;
        type: import("@moralisweb3/core").Camelize<"wallet" | "contract">;
        id?: string | undefined;
    }, import("./resolvers/updateStreamEvm").Params>>;
    readonly delete: (options: DeleteStreamOptions) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
        webhookUrl: string;
        description: string;
        tag: string;
        tokenAddress?: string | null | undefined;
        topic0?: string | null | undefined;
        includeNativeTxs?: boolean | undefined;
        abi?: {
            [key: string]: unknown;
        } | null | undefined;
        filter?: {
            [key: string]: unknown;
        } | null | undefined;
        address?: string | null | undefined;
        chainIds: string[];
        type: "wallet" | "contract";
        id?: string | undefined;
    }, {
        address: import("@moralisweb3/evm-utils").EvmAddress | undefined;
        tokenAddress: import("@moralisweb3/evm-utils").EvmAddress | undefined;
        chains: import("@moralisweb3/evm-utils").EvmChain[];
        webhookUrl: string;
        description: string;
        tag: string;
        topic0?: string | null | undefined;
        includeNativeTxs?: boolean | undefined;
        abi?: {
            [key: string]: unknown;
        } | null | undefined;
        filter?: {
            [key: string]: unknown;
        } | null | undefined;
        chainIds: string[];
        type: import("@moralisweb3/core").Camelize<"wallet" | "contract">;
        id?: string | undefined;
    }, {
        address: string | undefined;
        tokenAddress: string | undefined;
        chainIds: (string | number)[];
        chains: import("@moralisweb3/evm-utils").EvmChain[];
        webhookUrl: string;
        description: string;
        tag: string;
        topic0?: string | null | undefined;
        includeNativeTxs?: boolean | undefined;
        abi?: {
            [key: string]: unknown;
        } | null | undefined;
        filter?: {
            [key: string]: unknown;
        } | null | undefined;
        type: import("@moralisweb3/core").Camelize<"wallet" | "contract">;
        id?: string | undefined;
    }, {
        id: string;
    }>>;
    readonly getAll: (options: GetStreamsOptions) => Promise<import("@moralisweb3/api-utils").ApiPaginatedResultAdapter<import("@moralisweb3/api-utils").PaginatedResult<{
        webhookUrl: string;
        description: string;
        tag: string;
        tokenAddress?: string | null | undefined;
        topic0?: string | null | undefined;
        includeNativeTxs?: boolean | undefined;
        abi?: {
            [key: string]: unknown;
        } | null | undefined;
        filter?: {
            [key: string]: unknown;
        } | null | undefined;
        address?: string | null | undefined;
        chainIds: string[];
        type: "wallet" | "contract";
        id?: string | undefined;
    }[]>, {
        address: import("@moralisweb3/evm-utils").EvmAddress | undefined;
        tokenAddress: import("@moralisweb3/evm-utils").EvmAddress | undefined;
        chains: import("@moralisweb3/evm-utils").EvmChain[];
        webhookUrl: string;
        description: string;
        tag: string;
        topic0?: string | null | undefined;
        includeNativeTxs?: boolean | undefined;
        abi?: {
            [key: string]: unknown;
        } | null | undefined;
        filter?: {
            [key: string]: unknown;
        } | null | undefined;
        chainIds: string[];
        type: "wallet" | "contract";
        id?: string | undefined;
    }[], {
        address: string | undefined;
        tokenAddress: string | undefined;
        chainIds: (string | number)[];
        chains: import("@moralisweb3/evm-utils").EvmChain[];
        webhookUrl: string;
        description: string;
        tag: string;
        topic0?: string | null | undefined;
        includeNativeTxs?: boolean | undefined;
        abi?: {
            [key: string]: unknown;
        } | null | undefined;
        filter?: {
            [key: string]: unknown;
        } | null | undefined;
        type: "wallet" | "contract";
        id?: string | undefined;
    }[], {
        limit: number;
        cursor?: string | undefined;
    }>>;
    readonly setSettings: (params: {
        secretKey: string;
        region: "us-east-1" | "us-west-2" | "eu-central-1" | "ap-southeast-1";
    }) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<unknown, {
        success: boolean;
    }, {
        success: boolean;
    }, {
        secretKey: string;
        region: "us-east-1" | "us-west-2" | "eu-central-1" | "ap-southeast-1";
    }>>;
    private readonly _readSettings;
    readonly readSettings: () => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
        secretKey: string;
        region: "us-east-1" | "us-west-2" | "eu-central-1" | "ap-southeast-1";
    }, {
        secretKey: string;
        region: "us-east-1" | "us-west-2" | "eu-central-1" | "ap-southeast-1";
    }, {
        secretKey: string;
        region: "us-east-1" | "us-west-2" | "eu-central-1" | "ap-southeast-1";
    }, unknown>>;
}
//# sourceMappingURL=MoralisStreams.d.ts.map