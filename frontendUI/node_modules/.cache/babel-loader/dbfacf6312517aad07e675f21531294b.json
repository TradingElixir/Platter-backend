{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sachi\\\\Downloads\\\\Platter Inc\\\\frontendUI\\\\src\\\\components\\\\Nfts.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { Reload } from \"@web3uikit/icons\";\nimport { Input } from \"@web3uikit/core\";\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Nfts(_ref) {\n  _s();\n\n  let {\n    chain,\n    wallet,\n    filteredNfts,\n    setFilteredNfts,\n    nfts,\n    setNfts\n  } = _ref;\n  const [nameFilter, setNameFilter] = useState(\"\");\n  const [idFilter, setIdFilter] = useState(\"\");\n\n  async function getUserNfts() {\n    try {\n      const client = new AlchemyClient({\n        apiKey: process.env.ALCHEMY_API_KEY\n      });\n      const response = await client.getNFTBalance(address, {\n        network: chain\n      });\n\n      if (response.data.result) {\n        nftProcessing(response.data.result);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function nftProcessing(t) {\n    try {\n      const filteredNftPromises = t.map(async nft => {\n        let meta = JSON.parse(nft.metadata);\n\n        if (meta && meta.image) {\n          if (meta.image.startsWith(\"ipfs://\")) {\n            nft.image = \"https://ipfs.alchemyapi.io/ipfs/\" + meta.image.replace(\"ipfs://\", \"\");\n          } else if (meta.image.startsWith(\"Qm\")) {\n            nft.image = \"https://ipfs.alchemyapi.io/ipfs/\" + meta.image;\n          } else {\n            nft.image = meta.image;\n          }\n\n          try {\n            await axios.get(nft.image);\n            return nft;\n          } catch (e) {\n            console.log(e);\n          }\n        }\n      });\n      const filteredNfts = await Promise.all(filteredNftPromises);\n      setNfts(filteredNfts);\n      setFilteredNfts(filteredNfts);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  useEffect(() => {\n    if (idFilter === \"\" && nameFilter === \"\") {\n      return setFilteredNfts(nfts);\n    }\n\n    let filNfts = [];\n\n    for (let i = 0; i < nfts.length; i++) {\n      if (nfts[i].name.toLowerCase().includes(nameFilter) && idFilter.length === 0) {\n        filNfts.push(nfts[i]);\n      } else if (nfts[i].token_id.includes(idFilter) && nameFilter.length === 0) {\n        filNfts.push(nfts[i]);\n      } else if (nfts[i].token_id.includes(idFilter) && nfts[i].name.toLowerCase().includes(nameFilter)) {\n        filNfts.push(nfts[i]);\n      }\n    }\n\n    setFilteredNfts(filNfts);\n  }, [nameFilter, idFilter]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tabHeading\",\n      children: [\"NFT Portfolio \", /*#__PURE__*/_jsxDEV(Reload, {\n        onClick: getUserNfts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters\",\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        id: \"NameF\",\n        label: \"Name Filter\",\n        labelBgColor: \"rgb(0, 0, 55)\",\n        value: nameFilter,\n        style: {},\n        onChange: e => setNameFilter(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"IdF\",\n        label: \"Id Filter\",\n        labelBgColor: \"rgb(0, 0, 55)\",\n        value: idFilter,\n        style: {},\n        onChange: e => setIdFilter(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nftList\",\n      children: filteredNfts.length > 0 && filteredNfts.map(e => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"nftInfo\",\n            children: [e.image && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: e.image,\n              width: 230\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Name: \", e.name, \", \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"(ID: \", e.token_id.slice(0, 5), \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 17\n          }, this)\n        }, void 0, false);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Nfts, \"d0J5W15u9YgFxFOtF3+nu942cH8=\");\n\n_c = Nfts;\n;\nexport default Nfts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Nfts\");","map":{"version":3,"names":["React","axios","useState","useEffect","Reload","Input","_","Nfts","chain","wallet","filteredNfts","setFilteredNfts","nfts","setNfts","nameFilter","setNameFilter","idFilter","setIdFilter","getUserNfts","client","AlchemyClient","apiKey","process","env","ALCHEMY_API_KEY","response","getNFTBalance","address","network","data","result","nftProcessing","error","console","log","t","filteredNftPromises","map","nft","meta","JSON","parse","metadata","image","startsWith","replace","get","e","Promise","all","filNfts","i","length","name","toLowerCase","includes","push","token_id","target","value","slice"],"sources":["C:/Users/sachi/Downloads/Platter Inc/frontendUI/src/components/Nfts.js"],"sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { Reload } from \"@web3uikit/icons\";\nimport { Input } from \"@web3uikit/core\"\nimport _ from 'lodash';\n\n\n\nfunction Nfts({ chain, wallet, filteredNfts, setFilteredNfts, nfts, setNfts }) {\n  const [nameFilter, setNameFilter] = useState(\"\");\n  const [idFilter, setIdFilter] = useState(\"\");\n\n  async function getUserNfts() {\n    try {\n      const client = new AlchemyClient({\n        apiKey: process.env.ALCHEMY_API_KEY,\n      });\n      const response = await client.getNFTBalance(address, {\n        network: chain,\n      });\n      if (response.data.result) {\n        nftProcessing(response.data.result);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function nftProcessing(t) {\n    try {\n        const filteredNftPromises = t.map(async (nft) => {\n            let meta = JSON.parse(nft.metadata);\n            if (meta && meta.image) {\n                if (meta.image.startsWith(\"ipfs://\")) {\n                    nft.image = \"https://ipfs.alchemyapi.io/ipfs/\" + meta.image.replace(\"ipfs://\", \"\");\n                } else if (meta.image.startsWith(\"Qm\")) {\n                    nft.image = \"https://ipfs.alchemyapi.io/ipfs/\" + meta.image;\n                } else {\n                    nft.image = meta.image;\n                }\n                try {\n                    await axios.get(nft.image);\n                    return nft;\n                } catch (e) {\n                    console.log(e);\n                }\n            }\n        });\n        const filteredNfts = await Promise.all(filteredNftPromises);\n        setNfts(filteredNfts);\n        setFilteredNfts(filteredNfts);\n    } catch (e) {\n        console.log(e);\n    }\n}\n\n  \n  \n\n  useEffect(() => {\n    if (idFilter === \"\" && nameFilter === \"\") {\n      return setFilteredNfts(nfts);\n    }\n\n    let filNfts = [];\n\n    for (let i = 0; i < nfts.length; i++) {\n      if (\n        nfts[i].name.toLowerCase().includes(nameFilter) &&\n        idFilter.length === 0\n      ) {\n        filNfts.push(nfts[i]);\n      } else if (\n        nfts[i].token_id.includes(idFilter) &&\n        nameFilter.length === 0\n      ) {\n        filNfts.push(nfts[i]);\n      } else if (\n        nfts[i].token_id.includes(idFilter) &&\n        nfts[i].name.toLowerCase().includes(nameFilter)\n      ) {\n        filNfts.push(nfts[i]);\n      }\n    }\n\n    setFilteredNfts(filNfts);\n  }, [nameFilter, idFilter]);\n\n  return (\n    <>\n      <div className=\"tabHeading\">\n        NFT Portfolio <Reload onClick={getUserNfts} />\n      </div>\n      <div className= \"filters\">\n      <Input\n          id=\"NameF\"\n          label=\"Name Filter\"\n          labelBgColor=\"rgb(0, 0, 55)\"\n          value={nameFilter}\n          style={{}}\n          onChange={(e) => setNameFilter(e.target.value)}\n        />\n        <Input\n          id=\"IdF\"\n          label=\"Id Filter\"\n          labelBgColor=\"rgb(0, 0, 55)\"\n          value={idFilter}\n          style={{}}\n          onChange={(e) => setIdFilter(e.target.value)}\n        />\n        </div>\n        <div className=\"nftList\">\n        {filteredNfts.length > 0 &&\n        \n          filteredNfts.map((e) => {\n            return (\n              <>\n                <div className=\"nftInfo\">\n                {e.image && <img src={e.image} width={230} />}\n                \n                <div>Name: {e.name}, </div>\n                <div>(ID: {e.token_id.slice(0,5)})</div>\n                </div>\n              </>\n            );\n          })\n          }\n          </div>\n      \n    </>\n  )};\n        \n\nexport default Nfts;"],"mappings":"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"},"metadata":{},"sourceType":"module"}